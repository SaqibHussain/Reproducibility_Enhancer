/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package my.reproducbilityenhancer;

//import org.apache.http.m
import java.io.*;
import java.util.*;
import javax.swing.JFileChooser;
import javax.swing.text.DefaultCaret;

/**
 *
 * @author Supreme2
 */
public class Panel1 extends javax.swing.JPanel {

    private String[] nodes = null;
    private String username, password, host, dUsername, dPassword, dEmail,
            executable, args, image, baseImage, tag, repo, dependencies, results;
    private int slots, numProc;
    private ArrayList<File> fileList = new ArrayList<File>();
    private File dockerfile;
    protected MainFrame parentFrame;

    /**
     * Creates new form Panel1
     */
    public Panel1(MainFrame theParentFrame) {
        parentFrame = theParentFrame;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txbPassword = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txbUser = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txbNodes = new javax.swing.JTextArea();
        jLabel18 = new javax.swing.JLabel();
        txbStartHost = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        txbSlots = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txbProc = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        txbExec = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        txbArgs = new javax.swing.JTextField();
        chkResults = new javax.swing.JCheckBox();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        txbResultsFile = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txbDockerUsername = new javax.swing.JTextField();
        txbDockerPassword = new javax.swing.JTextField();
        txbDockerEmail = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        txbBaseImage = new javax.swing.JTextField();
        btnSearchImage = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        lstBaseImage = new javax.swing.JList();
        lblBaseImageSearchTimeout = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        txbDependencies = new javax.swing.JTextArea();
        btnAddFiles = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstFile = new javax.swing.JList();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        txbContainerTag = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        txbRepoName = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        chkDockerfile = new javax.swing.JCheckBox();
        btnDockerfile = new javax.swing.JButton();
        lblDockerfile = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txbLog = new javax.swing.JTextArea();
        jLabel21 = new javax.swing.JLabel();

        jButton1.setText("Build & Run");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setText("Nodes:");

        jLabel3.setText("Password:");

        jLabel2.setText("Username:");

        jLabel4.setText("Cluster Configuration");

        txbNodes.setColumns(20);
        txbNodes.setRows(5);
        jScrollPane1.setViewportView(txbNodes);

        jLabel18.setText("Start host:");

        jLabel17.setText("Slots per node:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel3)
                                .addComponent(jLabel18, javax.swing.GroupLayout.Alignment.TRAILING))
                            .addComponent(jLabel2)
                            .addComponent(jLabel17))
                        .addGap(1, 1, 1)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txbSlots)
                            .addComponent(txbUser, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txbPassword, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txbStartHost)
                            .addComponent(jScrollPane1))))
                .addGap(15, 15, 15))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(jLabel1))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txbUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txbPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txbStartHost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(txbSlots, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel5.setText("MPI Configuration");

        jLabel6.setText("Number of Processors:");

        txbProc.setName("txbMPINumProc"); // NOI18N

        jLabel19.setText("Executable Name:");

        jLabel20.setText("Execution Arguments:");

        chkResults.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkResultsActionPerformed(evt);
            }
        });

        jLabel22.setText("Fetch MPI Results File?");

        jLabel23.setText("Name of MPI Results FIle:");

        txbResultsFile.setEnabled(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(jLabel5)
                    .addComponent(jLabel19)
                    .addComponent(jLabel20)
                    .addComponent(jLabel22)
                    .addComponent(jLabel23))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txbProc)
                    .addComponent(txbExec)
                    .addComponent(txbArgs)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(chkResults)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(txbResultsFile))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txbProc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txbExec, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txbArgs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkResults)
                    .addComponent(jLabel22))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel23)
                    .addComponent(txbResultsFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel7.setText("Docker Configuration:");

        jLabel8.setText("Username:");

        jLabel9.setText("Password:");

        jLabel10.setText("Email:");

        txbDockerUsername.setName("txbDockerUsername"); // NOI18N

        txbDockerPassword.setName("txbDockerPassword"); // NOI18N

        txbDockerEmail.setName("txbDockerPassword"); // NOI18N

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txbDockerUsername)
                            .addComponent(txbDockerPassword)
                            .addComponent(txbDockerEmail))))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txbDockerUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addGap(7, 7, 7)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txbDockerPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txbDockerEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addContainerGap())
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel11.setText("Conatiner Dependencies:");

        jLabel14.setText("Base Image:");

        btnSearchImage.setText("Search");
        btnSearchImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchImageActionPerformed(evt);
            }
        });

        lstBaseImage.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane4.setViewportView(lstBaseImage);

        lblBaseImageSearchTimeout.setText(" ");

        jLabel15.setText("Container Configuration");

        txbDependencies.setColumns(20);
        txbDependencies.setRows(5);
        jScrollPane5.setViewportView(txbDependencies);

        btnAddFiles.setText("Choose Files");
        btnAddFiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddFilesActionPerformed(evt);
            }
        });

        lstFile.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(lstFile);

        jLabel12.setText("Container Tag:");

        jLabel13.setText("Files to add to container:");

        jLabel16.setText("Repo Name:");

        jLabel24.setText("Provide Dockerfile manually?");

        chkDockerfile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkDockerfileActionPerformed(evt);
            }
        });

        btnDockerfile.setText("Choose Dockerfile");
        btnDockerfile.setEnabled(false);
        btnDockerfile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDockerfileActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel13)
                                    .addComponent(jLabel14))))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(btnAddFiles)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                                        .addComponent(txbBaseImage, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnSearchImage)
                                        .addGap(0, 83, Short.MAX_VALUE))
                                    .addComponent(jScrollPane4)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblBaseImageSearchTimeout))))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel12)
                                    .addComponent(jLabel16))
                                .addGap(93, 93, 93)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txbContainerTag)
                                    .addComponent(txbRepoName)))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel15)
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addComponent(jLabel24)
                                        .addGap(26, 26, 26)
                                        .addComponent(chkDockerfile)
                                        .addGap(27, 27, 27)
                                        .addComponent(btnDockerfile)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lblDockerfile)))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(chkDockerfile)
                        .addComponent(jLabel24))
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnDockerfile)
                        .addComponent(lblDockerfile)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblBaseImageSearchTimeout)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSearchImage)
                            .addComponent(txbBaseImage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel14))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(btnAddFiles))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txbContainerTag, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(txbRepoName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        DefaultCaret caret = (DefaultCaret)txbLog.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
        txbLog.setColumns(20);
        txbLog.setRows(5);
        jScrollPane3.setViewportView(txbLog);

        jLabel21.setText("Log:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton1)
                            .addComponent(jLabel21))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 985, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel21)
                        .addGap(96, 96, 96))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3)
                        .addContainerGap())))
        );
    }// </editor-fold>//GEN-END:initComponents


    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            new Thread(new Runnable() {

                @Override
                public void run() {
                    try {
                        update("Starting");
                        setupVars();
                        ExecuteShellCommand obj = new ExecuteShellCommand();
                        RemoteServer rs;
                        String[] cmd;
                        StringBuilder sb = new StringBuilder();
                        String command = null;
                        
                        MPI mpi = new MPI(args, txbProc.getText(), executable, host, username, password, nodes, image, String.valueOf(slots));
                        Docker d = new Docker(baseImage, dependencies, fileList, password, repo, tag, dUsername, dPassword, dEmail);
                        //Create hosts file for MPI exec
                        mpi.makeHostFile();

                        //Build dockerfile
                        if (chkDockerfile.isSelected()) {
                            update("Coping Dockerfile to working directory...");
                            d.getDockerfile(dockerfile.getPath());
                        } else {
                            update("Creating Dockerfile...");
                            d.buildDockerfile();
                        }

                        //Set up docker permissions
                        d.setPermissions();

                        // Build container
                        update("Building Image from Dockerfile...");
                        d.buildContainer(txbLog);

                        //Login to docker hub
                        update("\nLogging into docker hub...");
                        update(d.login());

                        //Push image to docker hub
                        update("Pushing image to docker hub...");
                        d.push(txbLog);
                        
                        //Launch containers on all nodes and set up networking    
                        update("Starting containers on nodes and configuring networking...");
                        
                        mpi.deployContainers(txbLog);

                        //Run MPI
                        update("Running MPI...");
                        String results = mpi.runMPI(txbLog);
                        update(results);
                        
                        mpi.removeContainers(txbLog);

                        //Print results to file
                        update("Saving MPI results to file");
                        PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter("results", false)));
                        out.println(results);
                        out.flush();
                        //Fetch MPI results from head node
                        if (chkResults.isSelected()) {
                            update("Fetching results file from head node...");
                            mpi.fetch(results);
                        }

                        //Print config file
                        update("Building & Saving configuration file...");
                        out = new PrintWriter(new BufferedWriter(new FileWriter("config", false)));
                        out.println("image%" + image);
                        out.println("executable%" + mpi.getExecutable());
                        out.println("args%" + mpi.getArgs());
                        out.flush();


                        update("Done!");
                    } catch (Exception e) {
                        update(e.getMessage());
                        e.printStackTrace();
                    }
                }
            }).start();
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void setupVars() throws Exception {
        for (String s : txbNodes.getText().trim().split("\n")) {
            if (s.isEmpty()) {
                throw new Exception("No hosts entered!");
            }
        }
        nodes = txbNodes.getText().trim().split("\n");
        if (txbUser.getText().isEmpty()) {
            throw new Exception("No username entered");
        }
        username = txbUser.getText();
        if (txbPassword.getText().isEmpty()) {
            throw new Exception("No password entered");
        }
        password = txbPassword.getText();
        if (txbStartHost.getText().isEmpty()) {
            throw new Exception("No start host entered");
        }
        host = txbStartHost.getText();
        if (txbSlots.getText().isEmpty()) {
            throw new Exception("No slots entered");
        }
        if (Integer.parseInt(txbSlots.getText()) == 0) {
            throw new Exception("Must have at least one slot per node");
        }
        slots = Integer.parseInt(txbSlots.getText());
        if (txbDockerUsername.getText().isEmpty()) {
            throw new Exception("No Docker username entered");
        }
        dUsername = txbDockerUsername.getText();
        if (txbDockerPassword.getText().isEmpty()) {
            throw new Exception("No Docker password entered");
        }
        dPassword = txbDockerPassword.getText();
        if (txbDockerEmail.getText().isEmpty()) {
            throw new Exception("No Docker email entered");
        }
        dEmail = txbDockerEmail.getText();
        if (txbProc.getText().isEmpty()) {
            throw new Exception("No processors entered");
        }
        if (Integer.parseInt(txbProc.getText()) == 0) {
            throw new Exception("Must have at least one processor");
        }
        numProc = Integer.parseInt(txbProc.getText());
        if (numProc > nodes.length * slots) {
            throw new Exception("Not enough hosts to run MPI on");
        }
        if (txbExec.getText().isEmpty()) {
            throw new Exception("No executable file entered");
        }
        executable = txbExec.getText();
        //No Check for Args - Can be empty
        args = txbArgs.getText();
        if (chkResults.isSelected()) {
            if (txbResultsFile.getText().isEmpty()) {
                throw new Exception("No name for results file entered");
            }
            results = txbResultsFile.getText();
        }
        if (!chkDockerfile.isSelected()) {
            if (txbDependencies.getText().isEmpty()) {
                throw new Exception("No dependencies entered");
            }
            dependencies = txbDependencies.getText();
            if (lstBaseImage.isSelectionEmpty()) {
                throw new Exception("No base image selected");
            }
            baseImage = Arrays.asList(lstBaseImage.getSelectedValue().toString().split(" ")).get(0);
        } else {
            if (dockerfile == null) {
                throw new Exception("No Dockerfile selected");
            }
        }
        if (txbContainerTag.getText().isEmpty()) {
            throw new Exception("No image tag entered");
        }
        tag = txbContainerTag.getText();
        if (txbRepoName.getText().isEmpty()) {
            throw new Exception("No Docker repository entered");
        }
        repo = txbRepoName.getText();
        image = String.format("%s/%s:%s", dUsername, repo, tag);
    }

    private void update(String content) {
        txbLog.setText(txbLog.getText() + "\n" + content);
        txbLog.update(txbLog.getGraphics());
        txbLog.revalidate();
        txbLog.repaint();
    }

    private void btnAddFilesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddFilesActionPerformed
        File file = null;
        final JFileChooser fc = new JFileChooser();
        if (fc.showOpenDialog(Panel1.this) == JFileChooser.APPROVE_OPTION) {
            file = fc.getSelectedFile();
        }
        fileList.add(file);
        lstFile.setListData(fileList.toArray());
    }//GEN-LAST:event_btnAddFilesActionPerformed

    private void btnSearchImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchImageActionPerformed
        try {
            Docker d = new Docker();
            String output = d.searchImages(txbBaseImage.getText());
            String[] str = output.toString().split("\n");
            lstBaseImage.setListData(str);
        } catch (Exception e) {
            txbLog.setText(e.getMessage());
        }
    }//GEN-LAST:event_btnSearchImageActionPerformed

    private void chkResultsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkResultsActionPerformed
        if (chkResults.isSelected()) {
            txbResultsFile.setEnabled(true);
        } else {
            txbResultsFile.setEnabled(false);
        }
    }//GEN-LAST:event_chkResultsActionPerformed

    private void chkDockerfileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkDockerfileActionPerformed
        if (chkDockerfile.isSelected()) {
            btnDockerfile.setEnabled(true);
            txbDependencies.setEnabled(false);
            txbBaseImage.setEnabled(false);
            btnSearchImage.setEnabled(false);
            lstBaseImage.setEnabled(false);
            btnAddFiles.setEnabled(false);
            lstFile.setEnabled(false);
        } else {
            btnDockerfile.setEnabled(false);
        }
    }//GEN-LAST:event_chkDockerfileActionPerformed

    private void btnDockerfileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDockerfileActionPerformed
        final JFileChooser fc = new JFileChooser();
        if (fc.showOpenDialog(Panel1.this) == JFileChooser.APPROVE_OPTION) {
            dockerfile = fc.getSelectedFile();
            lblDockerfile.setText(dockerfile.getAbsolutePath());
        }
    }//GEN-LAST:event_btnDockerfileActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddFiles;
    private javax.swing.JButton btnDockerfile;
    private javax.swing.JButton btnSearchImage;
    private javax.swing.JCheckBox chkDockerfile;
    private javax.swing.JCheckBox chkResults;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JLabel lblBaseImageSearchTimeout;
    private javax.swing.JLabel lblDockerfile;
    private javax.swing.JList lstBaseImage;
    private javax.swing.JList lstFile;
    private javax.swing.JTextField txbArgs;
    private javax.swing.JTextField txbBaseImage;
    private javax.swing.JTextField txbContainerTag;
    private javax.swing.JTextArea txbDependencies;
    private javax.swing.JTextField txbDockerEmail;
    private javax.swing.JTextField txbDockerPassword;
    private javax.swing.JTextField txbDockerUsername;
    private javax.swing.JTextField txbExec;
    private javax.swing.JTextArea txbLog;
    private javax.swing.JTextArea txbNodes;
    private javax.swing.JTextField txbPassword;
    private javax.swing.JTextField txbProc;
    private javax.swing.JTextField txbRepoName;
    private javax.swing.JTextField txbResultsFile;
    private javax.swing.JTextField txbSlots;
    private javax.swing.JTextField txbStartHost;
    private javax.swing.JTextField txbUser;
    // End of variables declaration//GEN-END:variables

}
